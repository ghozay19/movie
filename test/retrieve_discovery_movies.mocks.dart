// Mocks generated by Mockito 5.4.4 from annotations
// in movies/test/retrieve_discovery_movies.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/core/constant/movies_sort_enum.dart' as _i7;
import 'package:movies/core/failure.dart' as _i5;
import 'package:movies/domain/entities/genre.dart' as _i8;
import 'package:movies/domain/entities/movies_response.dart' as _i6;
import 'package:movies/domain/repository/movie_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>> getDiscoverMovies({
    required int? page,
    int? genreId,
    _i7.MoviesSortBy? sortBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscoverMovies,
          [],
          {
            #page: page,
            #genreId: genreId,
            #sortBy: sortBy,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.MoviesResponse>(
          this,
          Invocation.method(
            #getDiscoverMovies,
            [],
            {
              #page: page,
              #genreId: genreId,
              #sortBy: sortBy,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.Genre>>> getGenres() =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenres,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i8.Genre>>>.value(
            _FakeEither_0<_i5.Failure, List<_i8.Genre>>(
          this,
          Invocation.method(
            #getGenres,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.Genre>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>> searchMovies({
    required int? page,
    required String? query,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [],
          {
            #page: page,
            #query: query,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>>.value(
                _FakeEither_0<_i5.Failure, _i6.MoviesResponse>(
          this,
          Invocation.method(
            #searchMovies,
            [],
            {
              #page: page,
              #query: query,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.MoviesResponse>>);
}
